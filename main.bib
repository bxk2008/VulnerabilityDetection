@inproceedings{DBLP:conf/ndss/LiZXO0WDZ18,
  author    = {Zhen Li and
               Deqing Zou and
               Shouhuai Xu and
               Xinyu Ou and
               Hai Jin and
               Sujuan Wang and
               Zhijun Deng and
               Yuyi Zhong},
  title     = {VulDeePecker: {A} Deep Learning-Based System for Vulnerability Detection},
  booktitle = {25th Annual Network and Distributed System Security Symposium, {NDSS}
               2018, San Diego, California, USA, February 18-21, 2018},
  year      = {2018},DBLP:conf/ndss/LiZXO0WDZ18
}
@inproceedings{Chernis:2018:MLM:3180445.3180453,
 author = {Chernis, Boris and Verma, Rakesh},
 title = {Machine Learning Methods for Software Vulnerability Detection},
 booktitle = {Proceedings of the Fourth ACM International Workshop on Security and Privacy Analytics},
 series = {IWSPA '18},
 year = {2018},
 isbn = {978-1-4503-5634-3},
 location = {Tempe, AZ, USA},
 pages = {31--39},
 numpages = {9},
 url = {http://doi.acm.org/10.1145/3180445.3180453},
 doi = {10.1145/3180445.3180453},
 acmid = {3180453},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {N-grams, buffer overflow, machine learning, software metrics, static analysis, suffix trees, vulnerability detection},
}
@ARTICLE{Comparative-Study,
author={Z. {Li} and D. {Zou} and J. {Tang} and Z. {Zhang} and M. {Sun} and H. {Jin}},
journal={IEEE Access},
title={A Comparative Study of Deep Learning-Based Vulnerability Detection System},
year={2019},
volume={7},
number={},
pages={103184-103197},
keywords={program diagnostics;recurrent neural nets;safety-critical software;deep learning-based vulnerability detection system;vulnerability patterns;vulnerability rules;source code static analysis;software products;F1-measure;bidirectional recurrent neural networks;RNN;bidirectional long short-term memory;BLSTM;false positive rate;Deep learning;Software;Data processing;Recurrent neural networks;Semantics;Training;Vulnerability detection;deep learning;source code;comparative study},
doi={10.1109/ACCESS.2019.2930578},
ISSN={},
month={},}
@inproceedings{Ma2017VuRLE,
  title={VuRLE: Automatic Vulnerability Detection and Repair by Learning from Examples},
  author={Ma, Siqi and Thung, Ferdian and Lo, David and Cong, Sun and Deng, Robert H.},
  booktitle={European Symposium on Research in Computer Security},
  year={2017},
 abstract={Vulnerability becomes a major threat to the security of many systems. Attackers can steal private information and perform harmful actions by exploiting unpatched vulnerabilities. Vulnerabilities often},
}

@article{Harer2018Automated,
  title={Automated software vulnerability detection with machine learning},
  author={Harer, Jacob A. and Kim, Louis Y. and Russell, Rebecca L. and Ozdemir, Onur and Lazovich, Tomo},
  year={2018},
 abstract={Abstract: Thousands of security vulnerabilities are discovered in production software each year, either reported publicly to the Common Vulnerabilities and Exposures database or discovered internally in proprietary code. Vulnerabilities often manifest themselves in subtle ways that are not obvious to code reviewers or the developers themselves. With the wealth of open source code available for analysis, there is an opportunity to learn the patterns of bugs that can lead to security vulnerabilities directly from data. In this paper, we present a data-driven approach to vulnerability detection using machine learning, specifically applied to C and C++ programs. We first compile a large dataset of hundreds of thousands of open-source functions labeled with the outputs of a static analyzer. We then compare methods applied directly to source code with methods applied to artifacts extracted from the build process, finding that source-based models perform better. We also compare the application of deep neural network models with more traditional models such as random forests and find the best performance comes from combining features learned by deep models with tree-based models. Ultimately, our highest performing model achieves an area under the precision-recall curve of 0.49 and an area under the ROC curve of 0.87.},
}

@article{Russell2018Automated,
  title={Automated Vulnerability Detection in Source Code Using Deep Representation Learning},
  author={Russell, Rebecca L. and Kim, Louis and Lei, H. Hamilton and Lazovich, Tomo and Mcconley, Marc W.},
  year={2018},
 abstract={Increasing numbers of software vulnerabilities are discovered every year whether they are reported publicly or discovered internally in proprietary code. These vulnerabilities can pose serious risk of exploit and result in system compromise, information leaks, or denial of service. We leveraged the wealth of C and C++ open-source code available to develop a large-scale function-level vulnerability detection system using machine learning. To supplement existing labeled vulnerability datasets, we compiled a vast dataset of millions of open-source functions and labeled it with carefully-selected findings from three different static analyzers that indicate potential exploits. Using these datasets, we developed a fast and scalable vulnerability detection tool based on deep feature representation learning that directly interprets lexed source code. We evaluated our tool on code from both real software packages and the NIST SATE IV benchmark dataset. Our results demonstrate that deep feature representation learning on source code is a promising approach for automated software vulnerability detection.},
}

@article{Zhen2018SySeVR,
  title={SySeVR: A Framework for Using Deep Learning to Detect Software Vulnerabilities},
  author={Zhen, Li and Zou, Deqing and Xu, Shouhuai and Hai, Jin and Jialai Wang},
  year={2018},
 abstract={Abstract: The detection of software vulnerabilities (or vulnerabilities for short) is an important problem that has yet to be tackled, as manifested by many vulnerabilities reported on a daily basis. This calls for machine learning methods to automate vulnerability detection. Deep learning is attractive for this purpose because it does not require human experts to manually define features. Despite the tremendous success of deep learning in other domains, its applicability to vulnerability detection is not systematically understood. In order to fill this void, we propose the first systematic framework for using deep learning to detect vulnerabilities. The framework, dubbed Syntax-based, Semantics-based, and Vector Representations (SySeVR), focuses on obtaining program representations that can accommodate syntax and semantic information pertinent to vulnerabilities. Our experiments with 4 software products demonstrate the usefulness of the framework: we detect 15 vulnerabilities that are not reported in the National Vulnerability Database. Among these 15 vulnerabilities, 7 are unknown and have been reported to the vendors, and the other 8 have been "silently" patched by the vendors when releasing newer versions of the products.},
}
@inproceedings{Ester1996A,
  title={A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise},
  author={Ester, Martin and Kriegel, Hans Peter and Sander, J?rg and Xu, Xiaowei},
  booktitle={International Conference on Knowledge Discovery \& Data Mining},
  year={1996},
}
@inproceedings{MITRE,
  title={Common Weakness Enumeration},
  author={MITRE},
  booktitle={https://cwe.mitre.org},
}
@inproceedings{Joern,
  title={Modeling and Discovering Vulnerabilities with Code Property Graphs},
  author={Yamaguchi, Fabian and Golde, Nico and Arp, Daniel and Rieck, Konrad},
  booktitle={Security \& Privacy},
  year={2014},
}
